@page "/dashboardCreator"
@using System.IO
@using System.Text
@using ObservabilityPlatform.Web.Builders
@using ObservabilityPlatform.Web.Services
@using ObservabilityPlatform.Web.Templates
@inject IGrafanaService Grafana

<div class="container">
    <h1>Dashboard Creator</h1>
    <br>
    <h3>Создание нового dashboard из json файлов</h3>
    <p>В открывшемся диалоге выбора файлов, выберите нужные для загрузки файлы. 
        В одном файле должен содержаться один dashboard</p>
    <InputFile OnChange="@LoadFiles" multiple />
    <br>
    <p>Результаты: @_fileResponse</p>
    <p>@_fileResponse</p>
</div>

@code {
    private string _fileResponse = "Выберите файлы для загрузки";
    
    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var sb = new StringBuilder();
        _fileResponse = string.Empty;
        
        foreach (var file in e.GetMultipleFiles())
        {
            var json = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
            var response = await Grafana.CreateDashboardWithoutValidation(json);

            sb.Append($"{response}\n");
        }
        
        _fileResponse = sb.ToString();
    }
}

<div class="container">
    <br>
    <h3>Создание нового dashboard из шаблона</h3>
    <p>Укажите нужные параметры в полях ниже и нажмите кнопку Создать</p>
    <label for="dashboardTitleInput" class="form-label">Название дашборда</label>
    <input @bind="_dashboardTitle" type="text" class="form-control" id="dashboardTitleInput">
    <label for="applicationGroupInput" class="form-label">Группа приложений</label>
    <input @bind="_applicationGroup" type="text" class="form-control" id="applicationGroupInput">
    <button @onclick="CreateDashboardFromTemplate">Создать дашборд</button>
</div>

@code
{
    private string _dashboardTitle;
    private string _applicationGroup;

    private async Task<string> CreateDashboardFromTemplate()
    {
        //var template = DashboardTemplates.DashboardTemplate;
        var template = await File.ReadAllTextAsync("templates/dashboardTemplate.json");
        var builder = new DashboardBuilder(template);

        var dashboard = builder
            .SetTitle(_dashboardTitle)
            .SetApplicationGroup(_applicationGroup)
            .Build();

        var response = await Grafana.CreateDashboardWithoutValidation(dashboard);

        return response;
    }
}
